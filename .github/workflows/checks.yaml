name: Checks

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]
jobs:
  pre-commit:
    name: pre-commit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        continue-on-error: true
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install cuda related dependencies
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry run pip install torch
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry run pip install torch-scatter
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # format, type check, and test your code
      #----------------------------------------------

      - name: Run pre-commit utilities
        run: |
          pre-commit run  --all-files

  # mypy:
  #   name: mypy
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.9, 3.8]

  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     #----------------------------------------------
  #     #  -----  install & configure poetry  -----
  #     #----------------------------------------------
  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         virtualenvs-create: true
  #         virtualenvs-in-project: true
  #         installer-parallel: true
  #     #----------------------------------------------
  #     #       load cached venv if cache exists
  #     #----------------------------------------------
  #     - name: Load cached venv
  #       id: cached-poetry-dependencies
  #       uses: actions/cache@v2
  #       with:
  #         path: .venv
  #         key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
  #     #----------------------------------------------
  #     # install dependencies if cache does not exist
  #     #----------------------------------------------
  #     - name: Install dependencies
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       continue-on-error: true
  #       run: poetry install --no-interaction --no-root
  #     #----------------------------------------------
  #     # install cuda related dependencies
  #     #----------------------------------------------
  #     - name: Install dependencies
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: poetry run pip install torch
  #     - name: Install dependencies
  #       if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
  #       run: poetry run pip install torch-scatter
  #     #----------------------------------------------
  #     # install your root project, if required
  #     #----------------------------------------------
  #     - name: Install library
  #       run: poetry install --no-interaction
  #     #----------------------------------------------
  #     # format, type check, and test your code
  #     #----------------------------------------------

  #     - name: MyPy
  #       run: |
  #         poetry run mypy enn_zoo
  #         poetry run mypy entity_gym
  #         poetry run mypy rogue_net
  #         poetry run mypy enn_ppo

  unit_test:
    name: unit test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.8]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        continue-on-error: true
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install cuda related dependencies
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry run pip install torch
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry run pip install torch-scatter
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      # format, type check, and test your code
      #----------------------------------------------

      - name: Run tests
        run: |
          poetry run pytest -v